asgiref==3.5.2
Django==4.1.3
sqlparse==0.4.3
tzdata==2022.6

# Selenium Test
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import time
# Set up the browser
chrome_driver = "/Users/motin/Desktop/chromedriver"
driver = webdriver.Chrome(executable_path=chrome_driver)

# Navigate to the website
driver.get("https://getvyt-web-production.up.railway.app/")
time.sleep(10)
password = ""
username = ""

# Find the search box element
search_box = driver.find_element(By.NAME, 'Username')
password_entry = driver.find_element(By.NAME, 'Passsword')

# Type "Selenium" into the search box
search_box.send_keys(username)
password_entry.send_keys(password)
password_entry.send_keys(Keys.ENTER)

# Wait for the search results to load
driver.implicitly_wait(10)

# Verify that the search returned results
assert "No results found." not in driver.page_source

# Close the browser
time.sleep(120)
driver.quit()

#Django tests
from django.test import TestCase
from .models import MyModel
from .views import MyView

class MyViewTestCase(TestCase):
    def setUp(self):
        # create some test data to use in the tests
        MyModel.objects.create(name="Test Model 1")
        MyModel.objects.create(name="Test Model 2")

    def test_my_view(self):
        # send a request to the view
        response = self.client.get('https://getvyt-web-production.up.railway.app/')

        # check that the response status code is correct
        self.assertEqual(response.status_code, 200)

        # check that the rendered context contains the correct number of models
        self.assertEqual(len(response.context['models']), 2)

        # check that the rendered HTML contains the correct text
        self.assertContains(response, "Test Model 1")
        self.assertContains(response, "Test Model 2")

